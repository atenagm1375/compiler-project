README file for Programming Assignment 2 (C++ edition)
=====================================================
Write-up for PA2
----------------
    The file cool.flex contains regular expressions needed for the language.
There were some pre defined variables such as MAX_STR_CONST which holds the
maximum possible length for the defined strings in the program written in COOL,
curr_lineno which holds the current line number of the program being lexically
analyzed, and string_buf which holds the readed string so far in a COOL program.
We defined two more variables as we needed: nested_comments_count which holds
the number of nested comments and lenstr which keeps the length of a string.
There are also two functions declared: invalidSize which gets a string as input
and outputs a boolean value showing whether the length of the input string is
less than the valid size(MAX_STR_CONST) or not, and strLengthError which returns
an error token when the length of a string is invalid and puts "String constant
too long" in error_msg.
    After all these declarations, in definition part comes the special names we
put for some regular expressions. DARROW was defined initially. We also added
DIGIT and WHITESPACE for our ease of use and code readability. Some start
conditions were also added here: COMMENT for nested comments, STRING for strings,
and WRONGSTRING for invalid string(null-contained string and invalid-size string).
The action taken for WRONGSTRING, as has been mention in the manual, is contin-
uing reading file from the next line.
    In the rules part of the code, we first defined the nested comment and one-
line comment. For nested comments, The start condition begins as soon as "(*"
is encountered. For each time we face a "(*", we increment nested_comments_count
and whenever we reach a "*)", we decrement it. If nested_comments_count equals
0, it means that the nested comments are finished and all "(*"s have been paired
with a "*)". Obviously, any new lines encountered in the code, no matter it is
in a comment or string or not), we increment the curr_lineno to keep track of
line number being analyzed at the moment for further error printings. There
also is the possibility that the programmer has forgotten to close a comment
until the end of the code. There is an EOF in comment error message with ERROR
token returned. Unmatched *) is another possible case which has been handled.
No tokens are returned for comments unless there is an error(ERROR token is
returned as mentioned above).
    After the comments part, all the operators are evaluated. At the beginning
comes the multiple-character ones, DARROW, ASSIGN, and LE. The other valid
operators come next, returning themselves as a token.
    Then it comes to keywords. All keywords in COOL are case-insensitive except
for true and false, which have small letters at their first character(the rest
is case-insensitive). For each keyword, the name in capital letters is returned
as the token. For true and false, BOOL_CONST token is returned and the true or
false value is also added to the table(cool_yylval.boolean is set).
    All types in the language are started with a capital letter and contain
letters, digits, and underscore. The TYPEID token is returned for them. They
are also added to idtable for later use.
    All object names in the language start with a small letter and contain
letters, digits, and underscore. The OBJECTID token is returned for them. They
are also added to idtable for later use.
    A sequence of digits represents an integer. INT_CONST token is returned for
them and they are added to inttable for later use.
    Here now it comes to the strings. double quote represents the string is
started. Consequently, the STRING start condition begins. As long as STRING
condition is valid, we are reading a string. By reading each character, the
lenstr variable is incremented. Null character is inhibited, so while encounter-
ing \0 or \\\0, there is the error message "String contains null character" and
an ERROR token is returned. we also begin WRONGSTRING condition which has been
discussed in above paragraphs. Since \ following a character(except for special
characters which will be discussed later) means that the character itself should
be there in the output string, so \ following the null character should be
considered here for the error. Other special characters that follow a \ with
a different meaning are: n, b, f, and t. So they are handled separately. Hitting
enter while typing a string is invalid operation. To be more specific, it is
encountered as an error. So, <STRING>\n returns ERROR token, sets error_msg to
"Unterminated string constant", and continues analyzing from the next line, con-
sidering it as a non-string and emptying buffer. Another possibility is that the
programmer forgets to close a string constant until the end of the code. There,
an ERROR token is returned and "EOF in string constant" will be the error messa-
ge. Reaching the next double unescaped double quote, we are done with the string
constant. So, the STR_CONST token will be returned and the string buffer will be
copied into string buffer. lenstr is set to 0 and string_buf will be emptied.
    Whitespaces will just be skipped in the text of code.
    Anything else other than the defined things will be error. The error message
would be the invalid character that has been faced.

    After typing make lexer, our lexer is ready to use. By typing ./lexer test.cl
all the tokens are printed with the line number they correspond to. We can also
generate machine code using ./mycoolc test.cl which sticks the written scanner
with its own parser and other dependencies.
    The input of our lexer is a code written in COOL language. After applying
the rules we defined in cool.flex file on that file, word by word, it generates
all the tokens and the tables defined above. What happens in background is exac-
tly what we have learned in the class, which is, it makes the corresponding NFA
for each regular expression we have defined, converts it to a DFA and at last,
minimize the DFA and runs it on the given word. Each word of the file will be
checked with all the regular expressions and match with one(. is the last chance
which means the character is invalid and there is error as described above).

    test.cl file contains the code we wrote for the previous phase of the project
which has been modified a bit for errors. Solving all errors, the program is run
with ./mycoolc as is run with the default coolc.
    a one-line comment is added to the first line.
    case-insensitivity is checked for keywords in words class and inherits.
    a nested comment is added in line 11.
    a $ is added on line 25 before the word temp, which is an invalid operator
in COOL language and there occurs an error.
    on line 45, there has been used single quotes and \ which are invalid
operators in the language.
    on line 85, there is an string constant defined, which is followed by enter.
As mentioned before, this is an Unterminated string constant error after going
to the next line and analyzing will continue from that next line on, with respect
to the fact that there is no string constant anymore.
    on line 100, \ following a normal character has been added and on line 106,
\ following a special character(in this case, \f) has been added.
    a null character has been added on line 100.
    an unterminated nested comment is also added at the end of the file.
    So in this way, almost all special cases for the lexer has been tested.
